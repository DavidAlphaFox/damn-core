

; make a wiki page which explains _the whole_ structure, game, etc. ablaufe etc.
; where you can click through with code links etc.

; that would be amazing an open source game where you can see verything that happens

; and pull all values out, e.g. asset manager sound-file-extsion, log?

; or main menu which maps (properites)

; an open source game which is actually documented, with screenshots, connections namespace graphs
; state diagrams etc.

; leaving out all the unnecessary details

; * how to add a new skill
; * how to add a new creature
; ?

; i would like to know how it works.... for any open source game there is _nothing_

; or even design decisions idk,

; also remove 'libgdx' folder .... unnecessary we don't care about libgdx at all
; also from 'app/libgdx'

; even move 'context/graphics/' into just 'graphics/'

{:app {:title "Cyber Dungeon Quest"
       :width  1440
       :height 900
       :full-screen? false
       :fps 60}


 ; Each context component:

 ; * what does it do ? component fns, side -effects (protocol implementations are side effects, should go in create maybe ?)
 ; * dependencies
 ; generate docs into markdown and put online with expandable easy to find or sth.


 ; TODO remove .libgdx
 ; TODO move Assets into 1 protocol only, no soundstore...

 :context [[:context/assets {:folder "resources/" ; TODO should be set in classpath and not necessary here ?
                             :sound-file-extensions #{"wav"}
                             :image-file-extensions #{"png" "bmp"}
                             :log-load-assets? false}]
           [:context/graphics {:tile-size 48
                               :default-font {:file "exocet/films.EXL_____.ttf" :size 16}}]
           ; on require;
           ; * bind-root api.graphics.color
           ; extend-type over api.context/Graphics

           ; # what does it depend on ?
           ; * tiled/layers & tiled/layer-index => context.tiled
           ; * context.ttf-generator
           ; * images depend on assets ... images loaded ... so assets first ...

           ; # private data usage of ':context/graphics' ?
           ; * g/render-world-view ( move to ctx itself ?)
           ; * g/render-gui-view ( move to ctx itself ?)
           ; * g/render-tiled-map ( complicated beast ... !)
           ; * draw-rect-actor @ inventory  (pass @ draw ?)
           ; used @ image drawer creator ....
           ; * used @ ->stage-screen .... & mouse-on-stage-actor?
           ; ->hp-mana-bars (actor draw ...)

           ; TODO where to put ttf-generator ? extends context but used from graphics ...
           ; TODO src/context/graphics/tiled_map_drawer.clj move to tiled because depends on tiled api extensions



           [:context/ui true]
           [:context/input true] ; add by default to app ?
           [:context/image-drawer-creator true] ; -> move to graphics
           [:context/stage true] ; => to ui/graphics ?
           [:context/tiled true] ; => add map renderer here

           [:context/config {:tag :dev
                             :configs {:prod {:map-editor? false
                                              :property-editor? false
                                              :debug-window? false
                                              :debug-options? false}
                                       :dev {:map-editor? true
                                             :property-editor? true
                                             :debug-window? true
                                             :debug-options? true}}}]
           [:effect/all true]
           [:entity/all true]
           [:modifier/all true]
           [:property/all true]

           ; and the whole thing depedns on property/all too
           [:context/property-types {:properties/audiovisual true
                                     :properties/creature true ; depends on entity
                                     :properties/item true ; depends on modifiers
                                     :properties/skill true ; depedns on effects
                                     :properties/world true}]

           ; depends on property-types ? -> move together?
           ; pass property-types here first of all ...
           [:context/properties {:file "resources/properties.edn"}]

           [:context/cursor true]
           [:context/builder true]
           [:context/effect true]
           [:context/modifier true]
           [:context/potential-fields true]
           [:context/render-debug true]
           [:context/transaction-handler true]
           [:context/inventory true]
           [:context/action-bar true]
           [:context/ecs true]
           [:context/game [:context/inventory
                           :context/action-bar
                           :context/uids-entities
                           :context/thrown-error
                           :context/game-paused
                           :context/game-logic-frame
                           :context/elapsed-game-time
                           :context/mouseover-entity
                           :context/player-message]]
           [:context/background-image "ui/moon_background.png"]
           [:context/screens {:first-screen :screens/main-menu
                              :screens {:screens/game           true
                                        :screens/main-menu      true
                                        :screens/map-editor     true
                                        :screens/minimap        true
                                        :screens/options-menu   true
                                        :screens/property-editor true}}]
           [:tx/audiovisual true]
           [:tx/creature true]
           [:tx/entity true]
           [:tx/sound true]
           [:tx/player-modal true]
           [:context/error-modal true]]}
