(ns gdx.input.keys
  (:refer-clojure :exclude [num])
  (:import com.badlogic.gdx.Input$Keys))

(def a Input$Keys/A)
(def alt-left Input$Keys/ALT_LEFT)
(def alt-right Input$Keys/ALT_RIGHT)
(def any-key Input$Keys/ANY_KEY)
(def apostrophe Input$Keys/APOSTROPHE)
(def at Input$Keys/AT)
(def b Input$Keys/B)
(def back Input$Keys/BACK)
(def backslash Input$Keys/BACKSLASH)
(def backspace Input$Keys/BACKSPACE)
(def button-a Input$Keys/BUTTON_A)
(def button-b Input$Keys/BUTTON_B)
(def button-c Input$Keys/BUTTON_C)
(def button-circle Input$Keys/BUTTON_CIRCLE)
(def button-l1 Input$Keys/BUTTON_L1)
(def button-l2 Input$Keys/BUTTON_L2)
(def button-mode Input$Keys/BUTTON_MODE)
(def button-r1 Input$Keys/BUTTON_R1)
(def button-r2 Input$Keys/BUTTON_R2)
(def button-select Input$Keys/BUTTON_SELECT)
(def button-start Input$Keys/BUTTON_START)
(def button-thumbl Input$Keys/BUTTON_THUMBL)
(def button-thumbr Input$Keys/BUTTON_THUMBR)
(def button-x Input$Keys/BUTTON_X)
(def button-y Input$Keys/BUTTON_Y)
(def button-z Input$Keys/BUTTON_Z)
(def c Input$Keys/C)
(def call Input$Keys/CALL)
(def camera Input$Keys/CAMERA)
(def caps-lock Input$Keys/CAPS_LOCK)
(def center Input$Keys/CENTER)
(def clear Input$Keys/CLEAR)
(def colon Input$Keys/COLON)
(def comma Input$Keys/COMMA)
(def control-left Input$Keys/CONTROL_LEFT)
(def control-right Input$Keys/CONTROL_RIGHT)
(def d Input$Keys/D)
(def del Input$Keys/DEL)
(def down Input$Keys/DOWN)
(def dpad-center Input$Keys/DPAD_CENTER)
(def dpad-down Input$Keys/DPAD_DOWN)
(def dpad-left Input$Keys/DPAD_LEFT)
(def dpad-right Input$Keys/DPAD_RIGHT)
(def dpad-up Input$Keys/DPAD_UP)
(def e Input$Keys/E)
(def end Input$Keys/END)
(def endcall Input$Keys/ENDCALL)
(def enter Input$Keys/ENTER)
(def envelope Input$Keys/ENVELOPE)
(def equals Input$Keys/EQUALS)
(def escape Input$Keys/ESCAPE)
(def explorer Input$Keys/EXPLORER)
(def f Input$Keys/F)
(def f1 Input$Keys/F1)
(def f10 Input$Keys/F10)
(def f11 Input$Keys/F11)
(def f12 Input$Keys/F12)
(def f13 Input$Keys/F13)
(def f14 Input$Keys/F14)
(def f15 Input$Keys/F15)
(def f16 Input$Keys/F16)
(def f17 Input$Keys/F17)
(def f18 Input$Keys/F18)
(def f19 Input$Keys/F19)
(def f2 Input$Keys/F2)
(def f20 Input$Keys/F20)
(def f21 Input$Keys/F21)
(def f22 Input$Keys/F22)
(def f23 Input$Keys/F23)
(def f24 Input$Keys/F24)
(def f3 Input$Keys/F3)
(def f4 Input$Keys/F4)
(def f5 Input$Keys/F5)
(def f6 Input$Keys/F6)
(def f7 Input$Keys/F7)
(def f8 Input$Keys/F8)
(def f9 Input$Keys/F9)
(def focus Input$Keys/FOCUS)
(def forward-del Input$Keys/FORWARD_DEL)
(def g Input$Keys/G)
(def grave Input$Keys/GRAVE)
(def h Input$Keys/H)
(def headsethook Input$Keys/HEADSETHOOK)
(def home Input$Keys/HOME)
(def i Input$Keys/I)
(def insert Input$Keys/INSERT)
(def j Input$Keys/J)
(def k Input$Keys/K)
(def l Input$Keys/L)
(def left Input$Keys/LEFT)
(def left-bracket Input$Keys/LEFT_BRACKET)
(def m Input$Keys/M)
(def max-keycode Input$Keys/MAX_KEYCODE)
(def media-fast-forward Input$Keys/MEDIA_FAST_FORWARD)
(def media-next Input$Keys/MEDIA_NEXT)
(def media-play-pause Input$Keys/MEDIA_PLAY_PAUSE)
(def media-previous Input$Keys/MEDIA_PREVIOUS)
(def media-rewind Input$Keys/MEDIA_REWIND)
(def media-stop Input$Keys/MEDIA_STOP)
(def menu Input$Keys/MENU)
(def meta-alt-left-on Input$Keys/META_ALT_LEFT_ON)
(def meta-alt-on Input$Keys/META_ALT_ON)
(def meta-alt-right-on Input$Keys/META_ALT_RIGHT_ON)
(def meta-shift-left-on Input$Keys/META_SHIFT_LEFT_ON)
(def meta-shift-on Input$Keys/META_SHIFT_ON)
(def meta-shift-right-on Input$Keys/META_SHIFT_RIGHT_ON)
(def meta-sym-on Input$Keys/META_SYM_ON)
(def minus Input$Keys/MINUS)
(def mute Input$Keys/MUTE)
(def n Input$Keys/N)
(def notification Input$Keys/NOTIFICATION)
(def num Input$Keys/NUM)
(def num-0 Input$Keys/NUM_0)
(def num-1 Input$Keys/NUM_1)
(def num-2 Input$Keys/NUM_2)
(def num-3 Input$Keys/NUM_3)
(def num-4 Input$Keys/NUM_4)
(def num-5 Input$Keys/NUM_5)
(def num-6 Input$Keys/NUM_6)
(def num-7 Input$Keys/NUM_7)
(def num-8 Input$Keys/NUM_8)
(def num-9 Input$Keys/NUM_9)
(def num-lock Input$Keys/NUM_LOCK)
(def numpad-0 Input$Keys/NUMPAD_0)
(def numpad-1 Input$Keys/NUMPAD_1)
(def numpad-2 Input$Keys/NUMPAD_2)
(def numpad-3 Input$Keys/NUMPAD_3)
(def numpad-4 Input$Keys/NUMPAD_4)
(def numpad-5 Input$Keys/NUMPAD_5)
(def numpad-6 Input$Keys/NUMPAD_6)
(def numpad-7 Input$Keys/NUMPAD_7)
(def numpad-8 Input$Keys/NUMPAD_8)
(def numpad-9 Input$Keys/NUMPAD_9)
(def numpad-add Input$Keys/NUMPAD_ADD)
(def numpad-comma Input$Keys/NUMPAD_COMMA)
(def numpad-divide Input$Keys/NUMPAD_DIVIDE)
(def numpad-dot Input$Keys/NUMPAD_DOT)
(def numpad-enter Input$Keys/NUMPAD_ENTER)
(def numpad-equals Input$Keys/NUMPAD_EQUALS)
(def numpad-left-paren Input$Keys/NUMPAD_LEFT_PAREN)
(def numpad-multiply Input$Keys/NUMPAD_MULTIPLY)
(def numpad-right-paren Input$Keys/NUMPAD_RIGHT_PAREN)
(def numpad-subtract Input$Keys/NUMPAD_SUBTRACT)
(def o Input$Keys/O)
(def p Input$Keys/P)
(def page-down Input$Keys/PAGE_DOWN)
(def page-up Input$Keys/PAGE_UP)
(def pause Input$Keys/PAUSE)
(def period Input$Keys/PERIOD)
(def pictsymbols Input$Keys/PICTSYMBOLS)
(def plus Input$Keys/PLUS)
(def pound Input$Keys/POUND)
(def power Input$Keys/POWER)
(def print-screen Input$Keys/PRINT_SCREEN)
(def q Input$Keys/Q)
(def r Input$Keys/R)
(def right Input$Keys/RIGHT)
(def right-bracket Input$Keys/RIGHT_BRACKET)
(def s Input$Keys/S)
(def scroll-lock Input$Keys/SCROLL_LOCK)
(def search Input$Keys/SEARCH)
(def semicolon Input$Keys/SEMICOLON)
(def shift-left Input$Keys/SHIFT_LEFT)
(def shift-right Input$Keys/SHIFT_RIGHT)
(def slash Input$Keys/SLASH)
(def soft-left Input$Keys/SOFT_LEFT)
(def soft-right Input$Keys/SOFT_RIGHT)
(def space Input$Keys/SPACE)
(def star Input$Keys/STAR)
(def switch-charset Input$Keys/SWITCH_CHARSET)
(def sym Input$Keys/SYM)
(def t Input$Keys/T)
(def tab Input$Keys/TAB)
(def u Input$Keys/U)
(def unknown Input$Keys/UNKNOWN)
(def up Input$Keys/UP)
(def v Input$Keys/V)
(def volume-down Input$Keys/VOLUME_DOWN)
(def volume-up Input$Keys/VOLUME_UP)
(def w Input$Keys/W)
(def x Input$Keys/X)
(def y Input$Keys/Y)
(def z Input$Keys/Z)
